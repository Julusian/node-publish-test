name: Publish Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

# This workflow will perform a publish whenever it is triggered
# If you are using a fork, and want to push tags you can disable this workflow in the github ui
jobs:
  prepare:
    name: Prepare package
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Enable corepack
        run: corepack enable
      - name: Determine publish info
        id: do-publish
        run: |
          # If this run was started manually, choose nightly for main and experimental otherwise.
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "Publishing nightly"
              echo "tag=nightly" >> $GITHUB_OUTPUT
            else
              echo "Publishing experimental"
              echo "tag=experimental" >> $GITHUB_OUTPUT
            fi
            
            PRERELEASE_TAG=nightly-$(echo "${{ github.ref_name }}" | sed -r 's/[^a-z0-9]+/-/gi')
            echo "prerelease=${PRERELEASE_TAG}" >> $GITHUB_OUTPUT
          
          else
            # Otherwise (push by tag), keep the previous logic: compare published vs package.json
            PUBLISHED_VERSION=$(yarn npm info --json @loupedeck/core | jq -c '.version' -r)
            THIS_VERSION=$(node -p "require('./package.json').version")
            # Simple bash helper to compare version numbers
            verlte() {
              [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt() {
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }
            if verlt $PUBLISHED_VERSION $THIS_VERSION
            then
              echo "Publishing latest"
              echo "tag=latest" >> $GITHUB_OUTPUT
            else
              echo "Publishing hotfix"
              echo "tag=hotfix" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Prepare build
        run: |
          yarn install

          # Bump to prerelease version if needed
          if [ "${{ steps.do-publish.outputs.prerelease }}" != "" ]; then
            yarn release --prerelease ${{ steps.do-publish.outputs.prerelease }}
          fi

          yarn build
        env:
          CI: true
      - name: Publish to NPM
        run: |
          yarn npm publish --access=public --provenance --tag ${{ steps.do-publish.outputs.tag }}

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "**Published:** $NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        env:
          CI: true
